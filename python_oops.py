# -*- coding: utf-8 -*-
"""Python OOPS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OCUzywJdL9tStlZsIqm_fezii_imZLBX
"""

class Rover:

  rovgeo = [10, 10, 10]

  def __init__(self, swarmid, roverid, rovloc):
    self.swarmid = swarmid
    self.roverid = roverid
    self.rovloc = rovloc

  def location(self):
    print("Rover's location: ", self.rovloc)
    print('Swarm ID: ', self.swarmid)
    print('Rover ID: ', self.roverid)

  def move(self, disp):
    self.rovloc = self.rovloc + disp
    print("Rover's location: ", self.rovloc)

  def verify(self, swarmid, roverid, disp):
    if swarmid == self.swarmid and roverid == self.roverid:
      self.move(disp)
    else:
      print('Wrong rover')

class Daughter(Rover):

  def __init__(self, swarmid, roverid, rovloc):
    super().__init__(swarmid, roverid, rovloc)

  rovgeo = [x/2 for x in Rover.rovgeo]

  def move(self, disp):
    return super().move(disp/2)

class User(Daughter):

  ids = [[]]

  def __init__(self, userid):
    self.userid = userid

class Manager(User):

  def __init__(self, userid):
    super().__init__(userid)

  def add_new(self, rover):

    boolean = False

    for i in range(len(self.ids)):
      if self.ids[i] == (rover.swarmid, rover.roverid):
        boolean = True

    if boolean == False:
      (self.ids).append((rover.swarmid, rover.roverid))
    else:
      print('Already there')

  def remove(self, rover):

    boolean = False

    for i in range(len(self.ids)):
      if self.ids[i] == (rover.swarmid, rover.roverid):
        boolean = True

    if boolean == True:
      (self.ids).remove((rover.swarmid, rover.roverid))
    else:
      print('Not there')

class Scientist(User):

  def __init__(self, userid):
    super().__init__(userid)

  def view(self, rover):

    boolean = False

    for i in range(len(self.ids)):
      if self.ids[i] == (rover.swarmid, rover.roverid):
        rover.location()
        boolean = True

    if boolean == False:
      print('Not there')

class Operator(User):

  def __init__(self, userid):
    super().__init__(userid)

  def control(self, rover, disp):

    boolean = False

    for i in range(len(self.ids)):
      if self.ids[i] == (rover.swarmid, rover.roverid):
        rover.move(disp)
        boolean = True

    if boolean == False:
      print('Not there')

  def find(self, rover1, rover2):

    boolean1 = False
    boolean2 = False

    for i in range(len(self.ids)):
      if self.ids[i] == (rover1.swarmid, rover1.roverid):
        boolean1 = True
        for j in range(len(self.ids)):
          if self.ids[j] == (rover2.swarmid, rover2.roverid):
            boolean2 = True
            rover1.rovloc = rover2.rovloc

    if boolean1 == False and boolean2 == False:
      print('Not there')

rover1 = Rover(1, 1, 1)
rover2 = Rover(2, 2, 2)
manager1 = Manager(1)
scientist1 = Scientist(2)

manager1.add_new(rover2)

scientist1.view(rover2)

scientist1.view(rover1)

operator1 = Operator(3)

operator1.control(rover2, 5)

manager1.add_new(rover1)

operator1.find(rover1, rover2)

scientist1.view(rover2)
scientist1.view(rover1)